===============
0: seed[0] = 19971231
1: seed[1] = 19981013
2: seed[2] = 1000000007
3: staticvalue = 0
4: =========FUNC int myscanf=========
5: SCANF n
6: RETURN n
7: =========END_FUNC int myscanf=========
8: =========FUNC void myprintf=========
9: PRINT n int
10: PRINT #ENDL
11: RETURN
12: RETURN
13: =========END_FUNC void myprintf=========
14: =========FUNC int set=========
15: i = 10
16: v = 0
17: x[0] = 1
18: #T1 = x[0]
19: #T2 = #T1 * 2
20: x[1] = #T2
21: #T3 = x[1]
22: #T4 = #T3 * 2
23: x[2] = #T4
24: #T5 = x[2]
25: #T6 = #T5 * 2
26: x[3] = #T6
27: #T7 = x[3]
28: #T8 = #T7 * 2
29: x[4] = #T8
30: #T9 = x[4]
31: #T10 = #T9 * 2
32: x[5] = #T10
33: #T11 = x[5]
34: #T12 = #T11 * 2
35: x[6] = #T12
36: #T13 = x[6]
37: #T14 = #T13 * 2
38: x[7] = #T14
39: #T15 = x[7]
40: #T16 = #T15 * 2
41: x[8] = #T16
42: #T17 = x[8]
43: #T18 = #T17 * 2
44: x[9] = #T18
45: #T19 = x[9]
46: #T20 = #T19 * 2
47: x[10] = #T20
48: #T21 = i - 30
49: JUMP_IF #T21>=0 label_1
50: LABEL label_2
51: #T22 = i + 1
52: i = #T22
53: #T23 = i - 1
54: #T24 = x[#T23]
55: #T25 = #T24 * 2
56: x[i] = #T25
57: #T26 = i - 30
58: JUMP_IF #T26<0 label_2
59: LABEL label_1
60: #T27 = pos / 30
61: #T28 = #T27 - 1000
62: JUMP_IF #T28<0 label_3
63: RETURN 0
64: LABEL label_3
65: #T29 = pos / 30
66: #T30 = a[#T29]
67: #T31 = pos / 30
68: #T32 = #T31 * 30
69: #T33 = pos - #T32
70: #T34 = x[#T33]
71: #T35 = #T30 / #T34
72: #T36 = pos / 30
73: #T37 = a[#T36]
74: #T38 = pos / 30
75: #T39 = #T38 * 30
76: #T40 = pos - #T39
77: #T41 = x[#T40]
78: #T42 = #T37 / #T41
79: #T43 = #T42 / 2
80: #T44 = #T43 * 2
81: #T45 = #T35 - #T44
82: #T46 = #T45 - d
83: JUMP_IF #T46==0 label_4
84: #T47 = pos / 30
85: #T48 = a[#T47]
86: #T49 = pos / 30
87: #T50 = #T49 * 30
88: #T51 = pos - #T50
89: #T52 = x[#T51]
90: #T53 = #T48 / #T52
91: #T54 = pos / 30
92: #T55 = a[#T54]
93: #T56 = pos / 30
94: #T57 = #T56 * 30
95: #T58 = pos - #T57
96: #T59 = x[#T58]
97: #T60 = #T55 / #T59
98: #T61 = #T60 / 2
99: #T62 = #T61 * 2
100: #T63 = #T53 - #T62
101: #T64 = #T63 - 0
102: JUMP_IF #T64!=0 label_5
103: #T65 = d - 1
104: JUMP_IF #T65!=0 label_6
105: #T66 = pos / 30
106: #T67 = #T66 * 30
107: #T68 = pos - #T67
108: #T69 = x[#T68]
109: v = #T69
110: LABEL label_6
111: LABEL label_5
112: #T70 = pos / 30
113: #T71 = a[#T70]
114: #T72 = pos / 30
115: #T73 = #T72 * 30
116: #T74 = pos - #T73
117: #T75 = x[#T74]
118: #T76 = #T71 / #T75
119: #T77 = pos / 30
120: #T78 = a[#T77]
121: #T79 = pos / 30
122: #T80 = #T79 * 30
123: #T81 = pos - #T80
124: #T82 = x[#T81]
125: #T83 = #T78 / #T82
126: #T84 = #T83 / 2
127: #T85 = #T84 * 2
128: #T86 = #T76 - #T85
129: #T87 = #T86 - 1
130: JUMP_IF #T87!=0 label_7
131: #T88 = d - 0
132: JUMP_IF #T88!=0 label_8
133: #T89 = pos / 30
134: #T90 = #T89 * 30
135: #T91 = pos - #T90
136: #T92 = x[#T91]
137: #T93 = v - #T92
138: v = #T93
139: LABEL label_8
140: LABEL label_7
141: LABEL label_4
142: #T94 = pos / 30
143: #T95 = pos / 30
144: #T96 = a[#T95]
145: #T97 = #T96 + v
146: a[#T94] = #T97
147: RETURN 0
148: =========END_FUNC int set=========
149: =========FUNC int rand=========
150: #T98 = seed[0]
151: #T99 = staticvalue * #T98
152: #T100 = seed[1]
153: #T101 = #T99 + #T100
154: staticvalue = #T101
155: #T102 = seed[2]
156: #T103 = staticvalue / #T102
157: #T104 = seed[2]
158: #T105 = #T103 * #T104
159: #T106 = staticvalue - #T105
160: staticvalue = #T106
161: #T107 = staticvalue - 0
162: JUMP_IF #T107>=0 label_9
163: #T108 = seed[2]
164: #T109 = #T108 + staticvalue
165: staticvalue = #T109
166: LABEL label_9
167: RETURN staticvalue
168: =========END_FUNC int rand=========
169: =========FUNC void main=========
170: tmp = 0
171: i = 0
172: PREPARE_CALL myscanf
173: CALL myscanf
174: #T110 = %RET + 0
175: n = #T110
176: PREPARE_CALL myscanf
177: CALL myscanf
178: #T111 = %RET + 0
179: staticvalue = #T111
180: #T112 = n - 0
181: JUMP_IF #T112<=0 label_10
182: LABEL label_11
183: #T113 = n - 1
184: n = #T113
185: PREPARE_CALL rand
186: CALL rand
187: #T114 = %RET + 0
188: z = #T114
189: #T115 = z / 300000
190: #T116 = #T115 * 300000
191: #T117 = z - #T116
192: x = #T117
193: PREPARE_CALL rand
194: CALL rand
195: #T118 = %RET + 0
196: z = #T118
197: #T119 = z / 2
198: #T120 = #T119 * 2
199: #T121 = z - #T120
200: y = #T121
201: PREPARE_CALL set
202: PUSH_PARA x
203: PUSH_PARA y
204: CALL set
205: PRINT n int
206: PRINT #ENDL
207: #T122 = n - 0
208: JUMP_IF #T122>0 label_11
209: LABEL label_10
210: #T123 = i - 1000
211: JUMP_IF #T123>=0 label_12
212: LABEL label_13
213: #T124 = a[i]
214: #T125 = a[i]
215: #T126 = #T125 / 100000
216: #T127 = #T126 * 100000
217: #T128 = #T124 - #T127
218: #T129 = tmp + #T128
219: tmp = #T129
220: #T130 = tmp / 100000
221: #T131 = #T130 * 100000
222: #T132 = tmp - #T131
223: tmp = #T132
224: #T133 = i + 1
225: i = #T133
226: #T134 = i - 1000
227: JUMP_IF #T134<0 label_13
228: LABEL label_12
229: PREPARE_CALL myprintf
230: PUSH_PARA tmp
231: CALL myprintf
232: RETURN
233: RETURN
234: =========END_FUNC void main=========
