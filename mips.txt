.data
arr__a_: .space 4000
arr__seed_: .space 12
arr_set_x_: .space 128
newline__: .asciiz "\n"
.text

# === 0 seed[0] = 19971231 ===
li $a2, 19971231
sw $a2, arr__seed_+0($zero)

# === 1 seed[1] = 19981013 ===
li $a2, 19981013
sw $a2, arr__seed_+4($zero)

# === 2 seed[2] = 1000000007 ===
li $a2, 1000000007
sw $a2, arr__seed_+8($zero)

# === 3 staticvalue = 0 ===
sw $zero, 0($gp)

# === 4 =========FUNC int myscanf========= ===
addi $sp, $sp, -324
j main
myscanf:

# === 5 SCANF n ===
li $v0, 5
syscall
move $s0, $v0

# === 6 RETURN n ===
move $v0, $s0
jr $ra

# === 7 =========END_FUNC int myscanf========= ===

# === 8 =========FUNC void myprintf========= ===
myprintf:
lw $s0, 100($sp)

# === 9 PRINT n int ===
move $a0, $s0
li $v0, 1
syscall

# === 10 PRINT #ENDL ===
la $a0, newline__
li $v0, 4
syscall

# === 11 RETURN ===
jr $ra

# === 12 RETURN ===
jr $ra

# === 13 =========END_FUNC void myprintf========= ===

# === 14 =========FUNC int set========= ===
set:
lw $s0, 100($sp)
lw $s1, 104($sp)

# === 15 i = 10 ===
li $s2, 10

# === 16 v = 0 ===
move $s3, $zero

# === 17 x[0] = 1 ===
li $a2, 1
sw $a2, arr_set_x_+0($zero)

# === 18 #T1 = x[0] ===
lw $t0, arr_set_x_+0($zero)

# === 19 #T2 = #T1 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 20 x[1] = #T2 ===
sw $t1, arr_set_x_+4($zero)
# RELEASE $t1

# === 21 #T3 = x[1] ===
lw $t0, arr_set_x_+4($zero)

# === 22 #T4 = #T3 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 23 x[2] = #T4 ===
sw $t1, arr_set_x_+8($zero)
# RELEASE $t1

# === 24 #T5 = x[2] ===
lw $t0, arr_set_x_+8($zero)

# === 25 #T6 = #T5 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 26 x[3] = #T6 ===
sw $t1, arr_set_x_+12($zero)
# RELEASE $t1

# === 27 #T7 = x[3] ===
lw $t0, arr_set_x_+12($zero)

# === 28 #T8 = #T7 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 29 x[4] = #T8 ===
sw $t1, arr_set_x_+16($zero)
# RELEASE $t1

# === 30 #T9 = x[4] ===
lw $t0, arr_set_x_+16($zero)

# === 31 #T10 = #T9 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 32 x[5] = #T10 ===
sw $t1, arr_set_x_+20($zero)
# RELEASE $t1

# === 33 #T11 = x[5] ===
lw $t0, arr_set_x_+20($zero)

# === 34 #T12 = #T11 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 35 x[6] = #T12 ===
sw $t1, arr_set_x_+24($zero)
# RELEASE $t1

# === 36 #T13 = x[6] ===
lw $t0, arr_set_x_+24($zero)

# === 37 #T14 = #T13 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 38 x[7] = #T14 ===
sw $t1, arr_set_x_+28($zero)
# RELEASE $t1

# === 39 #T15 = x[7] ===
lw $t0, arr_set_x_+28($zero)

# === 40 #T16 = #T15 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 41 x[8] = #T16 ===
sw $t1, arr_set_x_+32($zero)
# RELEASE $t1

# === 42 #T17 = x[8] ===
lw $t0, arr_set_x_+32($zero)

# === 43 #T18 = #T17 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 44 x[9] = #T18 ===
sw $t1, arr_set_x_+36($zero)
# RELEASE $t1

# === 45 #T19 = x[9] ===
lw $t0, arr_set_x_+36($zero)

# === 46 #T20 = #T19 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 47 x[10] = #T20 ===
sw $t1, arr_set_x_+40($zero)
# RELEASE $t1

# === 48 #T21 = i - 30 ===
subu $t0, $s2, 30

# === 49 JUMP_IF #T21>=0 label_1 ===
bgez $t0, label_1
# RELEASE $t0

# === 50 LABEL label_2 ===
label_2:

# === 51 i = i + 1 ===
addu $s2, $s2, 1

# === 52 #T23 = i - 1 ===
subu $t0, $s2, 1

# === 53 #T24 = x[#T23] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t1, arr_set_x_($a1)

# === 54 #T25 = #T24 * 2 ===
sll $t0, $t1, 1
# RELEASE $t1

# === 55 x[i] = #T25 ===
sll $a1, $s2, 2
sw $t0, arr_set_x_($a1)
# RELEASE $t0

# === 56 #T26 = i - 30 ===
subu $t0, $s2, 30

# === 57 JUMP_IF #T26<0 label_2 ===
bltz $t0, label_2
# RELEASE $t0

# === 58 LABEL label_1 ===
label_1:

# === 59 #T27 = pos / 30 ===
div $t0, $s0, 30

# === 60 #T28 = #T27 - 1000 ===
subu $t1, $t0, 1000
# RELEASE $t0

# === 61 JUMP_IF #T28<0 label_3 ===
bltz $t1, label_3
# RELEASE $t1

# === 62 RETURN 0 ===
move $v0, $zero
jr $ra

# === 63 LABEL label_3 ===
label_3:

# === 64 #T29 = pos / 30 ===
div $t0, $s0, 30

# === 65 #T30 = a[#T29] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t1, arr__a_($a1)

# === 66 #T31 = pos / 30 ===
div $t0, $s0, 30

# === 67 #T32 = #T31 * 30 ===
mul $t2, $t0, 30
# RELEASE $t0

# === 68 #T33 = pos - #T32 ===
subu $t0, $s0, $t2
# RELEASE $t2

# === 69 #T34 = x[#T33] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t2, arr_set_x_($a1)

# === 70 #T35 = #T30 / #T34 ===
div $t1, $t2
# RELEASE $t2
mflo $t0
# RELEASE $t1
# RELEASE $t2

# === 71 #T36 = pos / 30 ===
div $t1, $s0, 30

# === 72 #T37 = a[#T36] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t2, arr__a_($a1)

# === 73 #T38 = pos / 30 ===
div $t1, $s0, 30

# === 74 #T39 = #T38 * 30 ===
mul $t3, $t1, 30
# RELEASE $t1

# === 75 #T40 = pos - #T39 ===
subu $t1, $s0, $t3
# RELEASE $t3

# === 76 #T41 = x[#T40] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t3, arr_set_x_($a1)

# === 77 #T42 = #T37 / #T41 ===
div $t2, $t3
# RELEASE $t3
mflo $t1
# RELEASE $t2
# RELEASE $t3

# === 78 #T43 = #T42 / 2 ===
bgez $t1, tmp_label_1
# RELEASE $t1
subu $a3, $zero, $t1
# RELEASE $t1
sra $t2, $a3, 1
subu $t2, $zero, $t2
j tmp_label_2
tmp_label_1:
sra $t2, $t1, 1
# RELEASE $t1
tmp_label_2:

# === 79 #T44 = #T43 * 2 ===
sll $t1, $t2, 1
# RELEASE $t2

# === 80 #T45 = #T35 - #T44 ===
subu $t2, $t0, $t1
# RELEASE $t0
# RELEASE $t1

# === 81 #T46 = #T45 - d ===
subu $t0, $t2, $s1
# RELEASE $t2

# === 82 JUMP_IF #T46==0 label_4 ===
beq $t0, $zero, label_4
# RELEASE $t0

# === 83 #T47 = pos / 30 ===
div $t0, $s0, 30

# === 84 #T48 = a[#T47] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t1, arr__a_($a1)

# === 85 #T49 = pos / 30 ===
div $t0, $s0, 30

# === 86 #T50 = #T49 * 30 ===
mul $t2, $t0, 30
# RELEASE $t0

# === 87 #T51 = pos - #T50 ===
subu $t0, $s0, $t2
# RELEASE $t2

# === 88 #T52 = x[#T51] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t2, arr_set_x_($a1)

# === 89 #T53 = #T48 / #T52 ===
div $t1, $t2
# RELEASE $t2
mflo $t0
# RELEASE $t1
# RELEASE $t2

# === 90 #T54 = pos / 30 ===
div $t1, $s0, 30

# === 91 #T55 = a[#T54] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t2, arr__a_($a1)

# === 92 #T56 = pos / 30 ===
div $t1, $s0, 30

# === 93 #T57 = #T56 * 30 ===
mul $t3, $t1, 30
# RELEASE $t1

# === 94 #T58 = pos - #T57 ===
subu $t1, $s0, $t3
# RELEASE $t3

# === 95 #T59 = x[#T58] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t3, arr_set_x_($a1)

# === 96 #T60 = #T55 / #T59 ===
div $t2, $t3
# RELEASE $t3
mflo $t1
# RELEASE $t2
# RELEASE $t3

# === 97 #T61 = #T60 / 2 ===
bgez $t1, tmp_label_3
# RELEASE $t1
subu $a3, $zero, $t1
# RELEASE $t1
sra $t2, $a3, 1
subu $t2, $zero, $t2
j tmp_label_4
tmp_label_3:
sra $t2, $t1, 1
# RELEASE $t1
tmp_label_4:

# === 98 #T62 = #T61 * 2 ===
sll $t1, $t2, 1
# RELEASE $t2

# === 99 #T63 = #T53 - #T62 ===
subu $t2, $t0, $t1
# RELEASE $t0
# RELEASE $t1

# === 100 #T64 = #T63 ===
move $t0, $t2
# RELEASE $t2

# === 101 JUMP_IF #T64!=0 label_5 ===
bne $t0, $zero, label_5
# RELEASE $t0

# === 102 #T65 = d - 1 ===
subu $t0, $s1, 1

# === 103 JUMP_IF #T65!=0 label_6 ===
bne $t0, $zero, label_6
# RELEASE $t0

# === 104 #T66 = pos / 30 ===
div $t0, $s0, 30

# === 105 #T67 = #T66 * 30 ===
mul $t1, $t0, 30
# RELEASE $t0

# === 106 #T68 = pos - #T67 ===
subu $t0, $s0, $t1
# RELEASE $t1

# === 107 v = x[#T68] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $s3, arr_set_x_($a1)

# === 108 LABEL label_6 ===
label_6:

# === 109 LABEL label_5 ===
label_5:

# === 110 #T70 = pos / 30 ===
div $t0, $s0, 30

# === 111 #T71 = a[#T70] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t1, arr__a_($a1)

# === 112 #T72 = pos / 30 ===
div $t0, $s0, 30

# === 113 #T73 = #T72 * 30 ===
mul $t2, $t0, 30
# RELEASE $t0

# === 114 #T74 = pos - #T73 ===
subu $t0, $s0, $t2
# RELEASE $t2

# === 115 #T75 = x[#T74] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t2, arr_set_x_($a1)

# === 116 #T76 = #T71 / #T75 ===
div $t1, $t2
# RELEASE $t2
mflo $t0
# RELEASE $t1
# RELEASE $t2

# === 117 #T77 = pos / 30 ===
div $t1, $s0, 30

# === 118 #T78 = a[#T77] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t2, arr__a_($a1)

# === 119 #T79 = pos / 30 ===
div $t1, $s0, 30

# === 120 #T80 = #T79 * 30 ===
mul $t3, $t1, 30
# RELEASE $t1

# === 121 #T81 = pos - #T80 ===
subu $t1, $s0, $t3
# RELEASE $t3

# === 122 #T82 = x[#T81] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t3, arr_set_x_($a1)

# === 123 #T83 = #T78 / #T82 ===
div $t2, $t3
# RELEASE $t3
mflo $t1
# RELEASE $t2
# RELEASE $t3

# === 124 #T84 = #T83 / 2 ===
bgez $t1, tmp_label_5
# RELEASE $t1
subu $a3, $zero, $t1
# RELEASE $t1
sra $t2, $a3, 1
subu $t2, $zero, $t2
j tmp_label_6
tmp_label_5:
sra $t2, $t1, 1
# RELEASE $t1
tmp_label_6:

# === 125 #T85 = #T84 * 2 ===
sll $t1, $t2, 1
# RELEASE $t2

# === 126 #T86 = #T76 - #T85 ===
subu $t2, $t0, $t1
# RELEASE $t0
# RELEASE $t1

# === 127 #T87 = #T86 - 1 ===
subu $t0, $t2, 1
# RELEASE $t2

# === 128 JUMP_IF #T87!=0 label_7 ===
bne $t0, $zero, label_7
# RELEASE $t0

# === 129 #T88 = d ===
move $t0, $s1

# === 130 JUMP_IF #T88!=0 label_8 ===
bne $t0, $zero, label_8
# RELEASE $t0

# === 131 #T89 = pos / 30 ===
div $t0, $s0, 30

# === 132 #T90 = #T89 * 30 ===
mul $t1, $t0, 30
# RELEASE $t0

# === 133 #T91 = pos - #T90 ===
subu $t0, $s0, $t1
# RELEASE $t1

# === 134 #T92 = x[#T91] ===
sll $a1, $t0, 2
# RELEASE $t0
lw $t1, arr_set_x_($a1)

# === 135 v = v - #T92 ===
subu $s3, $s3, $t1
# RELEASE $t1

# === 136 LABEL label_8 ===
label_8:

# === 137 LABEL label_7 ===
label_7:

# === 138 LABEL label_4 ===
label_4:

# === 139 #T94 = pos / 30 ===
div $t0, $s0, 30

# === 140 #T95 = pos / 30 ===
div $t1, $s0, 30

# === 141 #T96 = a[#T95] ===
sll $a1, $t1, 2
# RELEASE $t1
lw $t2, arr__a_($a1)

# === 142 #T97 = #T96 + v ===
addu $t1, $t2, $s3
# RELEASE $t2

# === 143 a[#T94] = #T97 ===
sll $a1, $t0, 2
# RELEASE $t0
sw $t1, arr__a_($a1)
# RELEASE $t1

# === 144 RETURN 0 ===
move $v0, $zero
jr $ra

# === 145 =========END_FUNC int set========= ===

# === 146 =========FUNC int rand========= ===
rand:

# === 147 #T98 = seed[0] ===
lw $t0, arr__seed_+0($zero)

# === 148 #T99 = staticvalue * #T98 ===
lw $a1, 0($gp)
mul $t1, $a1, $t0
# RELEASE $t0

# === 149 #T100 = seed[1] ===
lw $t0, arr__seed_+4($zero)

# === 150 staticvalue = #T99 + #T100 ===
addu $a1, $t1, $t0
# RELEASE $t1
# RELEASE $t0
sw $a1, 0($gp)

# === 151 #T102 = seed[2] ===
lw $t0, arr__seed_+8($zero)

# === 152 #T103 = staticvalue / #T102 ===
lw $a1, 0($gp)
div $a1, $t0
# RELEASE $t0
mflo $t1
# RELEASE $t0

# === 153 #T104 = seed[2] ===
lw $t0, arr__seed_+8($zero)

# === 154 #T105 = #T103 * #T104 ===
mul $t2, $t1, $t0
# RELEASE $t1
# RELEASE $t0

# === 155 staticvalue = staticvalue - #T105 ===
lw $a1, 0($gp)
subu $a1, $a1, $t2
# RELEASE $t2
sw $a1, 0($gp)

# === 156 #T107 = staticvalue ===
lw $t0, 0($gp)

# === 157 JUMP_IF #T107>=0 label_9 ===
bgez $t0, label_9
# RELEASE $t0

# === 158 #T108 = seed[2] ===
lw $t0, arr__seed_+8($zero)

# === 159 staticvalue = #T108 + staticvalue ===
lw $a1, 0($gp)
addu $a1, $t0, $a1
# RELEASE $t0
sw $a1, 0($gp)

# === 160 LABEL label_9 ===
label_9:

# === 161 RETURN staticvalue ===
lw $v0, 0($gp)
jr $ra

# === 162 =========END_FUNC int rand========= ===

# === 163 =========FUNC void main========= ===
main:

# === 164 tmp = 0 ===
move $s0, $zero

# === 165 i = 0 ===
move $s1, $zero

# === 166 PREPARE_CALL myscanf ===
addi $sp, $sp, -200

# === 167 CALL myscanf ===
sw $s0, 24($sp)
sw $s1, 28($sp)
jal myscanf
lw $s0, 24($sp)
lw $s1, 28($sp)
addi $sp, $sp, 200

# === 168 n = %RET ===
move $s2, $v0

# === 169 PREPARE_CALL myscanf ===
addi $sp, $sp, -200

# === 170 CALL myscanf ===
sw $s0, 24($sp)
sw $s1, 28($sp)
sw $s2, 32($sp)
jal myscanf
lw $s0, 24($sp)
lw $s1, 28($sp)
lw $s2, 32($sp)
addi $sp, $sp, 200

# === 171 staticvalue = %RET ===
sw $v0, 0($gp)

# === 172 #T112 = n ===
move $t0, $s2

# === 173 JUMP_IF #T112<=0 label_10 ===
blez $t0, label_10
# RELEASE $t0

# === 174 LABEL label_11 ===
label_11:

# === 175 n = n - 1 ===
subu $s2, $s2, 1

# === 176 PREPARE_CALL rand ===
addi $sp, $sp, -248

# === 177 CALL rand ===
sw $s0, 24($sp)
sw $s1, 28($sp)
sw $s2, 32($sp)
jal rand
lw $s0, 24($sp)
lw $s1, 28($sp)
lw $s2, 32($sp)
addi $sp, $sp, 248

# === 178 z = %RET ===
move $s3, $v0

# === 179 #T115 = z / 300000 ===
div $t0, $s3, 300000

# === 180 #T116 = #T115 * 300000 ===
mul $t1, $t0, 300000
# RELEASE $t0

# === 181 x = z - #T116 ===
subu $s4, $s3, $t1
# RELEASE $t1

# === 182 PREPARE_CALL rand ===
addi $sp, $sp, -248

# === 183 CALL rand ===
sw $s0, 24($sp)
sw $s1, 28($sp)
sw $s2, 32($sp)
sw $s3, 36($sp)
sw $s4, 40($sp)
jal rand
lw $s0, 24($sp)
lw $s1, 28($sp)
lw $s2, 32($sp)
lw $s3, 36($sp)
lw $s4, 40($sp)
addi $sp, $sp, 248

# === 184 z = %RET ===
move $s3, $v0

# === 185 #T119 = z / 2 ===
bgez $s3, tmp_label_7
subu $a3, $zero, $s3
sra $t0, $a3, 1
subu $t0, $zero, $t0
j tmp_label_8
tmp_label_7:
sra $t0, $s3, 1
tmp_label_8:

# === 186 #T120 = #T119 * 2 ===
sll $t1, $t0, 1
# RELEASE $t0

# === 187 y = z - #T120 ===
subu $s5, $s3, $t1
# RELEASE $t1

# === 188 PREPARE_CALL set ===
addi $sp, $sp, -728

# === 189 PUSH_PARA x ===
sw $s4, 100($sp)

# === 190 PUSH_PARA y ===
sw $s5, 104($sp)

# === 191 CALL set ===
sw $s0, 24($sp)
sw $s1, 28($sp)
sw $s2, 32($sp)
sw $s3, 36($sp)
sw $s4, 40($sp)
sw $s5, 44($sp)
jal set
lw $s0, 24($sp)
lw $s1, 28($sp)
lw $s2, 32($sp)
lw $s3, 36($sp)
lw $s4, 40($sp)
lw $s5, 44($sp)
addi $sp, $sp, 728

# === 192 #T122 = n ===
move $t0, $s2

# === 193 JUMP_IF #T122>0 label_11 ===
bgtz $t0, label_11
# RELEASE $t0

# === 194 LABEL label_10 ===
label_10:

# === 195 #T123 = i - 1000 ===
subu $t0, $s1, 1000

# === 196 JUMP_IF #T123>=0 label_12 ===
bgez $t0, label_12
# RELEASE $t0

# === 197 LABEL label_13 ===
label_13:

# === 198 #T124 = a[i] ===
sll $a1, $s1, 2
lw $t0, arr__a_($a1)

# === 199 #T125 = a[i] ===
sll $a1, $s1, 2
lw $t1, arr__a_($a1)

# === 200 #T126 = #T125 / 100000 ===
div $t2, $t1, 100000
# RELEASE $t1

# === 201 #T127 = #T126 * 100000 ===
mul $t1, $t2, 100000
# RELEASE $t2

# === 202 #T128 = #T124 - #T127 ===
subu $t2, $t0, $t1
# RELEASE $t0
# RELEASE $t1

# === 203 tmp = tmp + #T128 ===
addu $s0, $s0, $t2
# RELEASE $t2

# === 204 #T130 = tmp / 100000 ===
div $t0, $s0, 100000

# === 205 #T131 = #T130 * 100000 ===
mul $t1, $t0, 100000
# RELEASE $t0

# === 206 tmp = tmp - #T131 ===
subu $s0, $s0, $t1
# RELEASE $t1

# === 207 i = i + 1 ===
addu $s1, $s1, 1

# === 208 #T134 = i - 1000 ===
subu $t0, $s1, 1000

# === 209 JUMP_IF #T134<0 label_13 ===
bltz $t0, label_13
# RELEASE $t0

# === 210 LABEL label_12 ===
label_12:

# === 211 PREPARE_CALL myprintf ===
addi $sp, $sp, -200

# === 212 PUSH_PARA tmp ===
sw $s0, 100($sp)

# === 213 CALL myprintf ===
sw $s0, 24($sp)
sw $s1, 28($sp)
sw $s2, 32($sp)
sw $s3, 36($sp)
sw $s4, 40($sp)
sw $s5, 44($sp)
jal myprintf
lw $s0, 24($sp)
lw $s1, 28($sp)
lw $s2, 32($sp)
lw $s3, 36($sp)
lw $s4, 40($sp)
lw $s5, 44($sp)
addi $sp, $sp, 200

# === 214 RETURN ===
li $v0, 10
syscall

# === 215 RETURN ===
li $v0, 10
syscall

# === 216 =========END_FUNC void main========= ===
